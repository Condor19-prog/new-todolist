{"version":3,"sources":["reportWebVitals.ts","api/todolist-api.ts","api/auth-api.ts","utils/error-utils.ts","state/authReducer.ts","state/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","api/task-api.tsx","styles.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/task/Task.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","features/todolistList/Todolist.tsx","features/TodolistList.tsx","features/login/Login.tsx","features/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","Alert","props","elevation","variant","taskStatuses","taskPriorities","ErrorSnackbar","React","memo","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","useStyles","makeStyles","red","background","border","borderRadius","boxShadow","color","height","padding","margin","blue","smallBtn","minWidth","removeTask","AddItemForm","console","log","useState","setTitle","setError","addTaskTitle","trim","addItem","classes","TextField","onChange","e","currentTarget","onKeyPress","key","label","helperText","disabled","entityStatus","Button","className","onClick","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","tasksAPI","taskId","model","Task","changeTaskStatus","changeTasksTitle","task","onChangeTitleTask","useCallback","newTitle","id","Completed","Checkbox","checked","newIsDoneChecked","New","IconButton","changeTodolistEntityStatusAC","updateTaskAC","updateTaskTC","domainModel","getState","tasks","find","t","apiModel","deadline","description","priority","res","resultCode","catch","warn","Todolist","changeFilter","addTask","todolist","removeTodolists","onChangeTitle","demo","useEffect","setTasksAC","items","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onChangeTodolistTitle","tasksForTodolist","filter","map","TodolistList","todolists","auth","removeTaskAC","removeTaskTC","newTaskTitle","item","addTaskTC","changeStatus","removeTodolistAC","removeTodolistsTC","addTodolist","addTodolistsTC","changeTodolistTitleAC","changeTodolistsTC","action","changeTodolistFilterAC","Grid","container","style","spacing","tl","allTodolistTasks","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","rel","getFieldProps","touched","fontSize","FormControlLabel","control","AppWithRedux","logOutHandler","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","filteredTodolist","newTodolist","stateCopy","newTask","todoListId","newTasks","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3897a94e.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\n\n const settings = {\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'c9904dcf-3bb3-447f-a0b3-278ebd3674e9'\n    }\n}\nexport const instance = axios.create({\n    ...settings\n})\nexport type todolistType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport type responseType<D = {}> = {\n    resultCode: number\n    messages: string[]\n    data: D\n}\n\nexport const todolistAPI = {\n    getTodolist() {\n        return instance.get<todolistType[]>(`todo-lists`)\n    },\n    addTodolist(title: string) {\n        return instance.post<responseType<{ item: todolistType }>>(`todo-lists`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<responseType>(`todo-lists/${todolistId}`)\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<responseType>(`todo-lists/${todolistId}`, {title})\n    }\n}","import {responseType, instance} from \"./todolist-api\";\n\nexport type loginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\nexport const authAPI = {\n    login(data: loginParamsType) {\n        return instance.post<responseType<{ userId: string }>>(`auth/login`, data)\n    },\n    logout() {\n        return instance.delete<responseType>(`auth/login`)\n    },\n    me() {\n        return instance.get<responseType<{ id: number, email: string, login: string }>>(`auth/me`)\n    }\n}\n","import {ActionsType, setAppErrorAC, setAppStatusAC} from \"../state/app-reducer\";\nimport {responseType} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\n\nexport const handleServerAppError = <D>(data: responseType<D>, dispatch: Dispatch<ActionsType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('some error occurred'))\n    }\n    dispatch(setAppStatusAC(\"failed\"))\n}\nexport const handleServerNetworkError = <D>(error: { message: string }, dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\n    dispatch(setAppStatusAC(\"failed\"))\n}","import {Dispatch} from \"redux\";\nimport {setAppStatusAC} from \"./app-reducer\";\nimport {authAPI, loginParamsType} from \"../api/auth-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype initialStateType = typeof initialState\ntype actionType = setIsLoggedInACType\nexport const authReducer = (state: initialStateType = initialState, action: actionType): initialStateType => {\n    switch (action.type) {\n        case \"login/SET-IS-LOGGED-IN\":\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\ntype setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\nexport const loginTC = (data: loginParamsType) =>\n    (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        authAPI.login(data)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(setIsLoggedInAC(true))\n                    dispatch(setAppStatusAC(\"succeeded\"))\n                } else {\n                    handleServerAppError(res.data, dispatch)\n                }\n            })\n            .catch(error => {\n                handleServerNetworkError(error, dispatch)\n            })\n    }\n\nexport const logoutTC = () => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/auth-api\";\nimport {setIsLoggedInAC} from \"./authReducer\";\nimport {handleServerAppError} from \"../utils/error-utils\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nconst initialState = {\n    status: 'loading' as RequestStatusType,\n    error: null as null | string,\n    isInitialized: false\n}\n\nexport type InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case \"APP/SET-ERROR\":\n            return {...state, error: action.error}\n        case \"APP/SET-IS-INITIALIZED\":\n            return {...state, isInitialized: action.isInitialized}\n\n        default:\n            return state\n    }\n}\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\nexport const setAppErrorAC = (error: null | string) => ({type: 'APP/SET-ERROR', error} as const)\nexport const isInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\nexport const initializeAppTC = () =>\n    (dispatch: Dispatch) => {\n        authAPI.me().then(res => {\n            dispatch(setAppStatusAC(\"loading\"))\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(true))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n            dispatch(isInitializedAC(true))\n        })\n    }\nexport type ActionsType =\n    ReturnType<typeof setAppStatusAC> |\n    ReturnType<typeof setAppErrorAC> |\n    ReturnType<typeof isInitializedAC>\n\n\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {appRootStateType} from \"../../state/store\";\nimport {setAppErrorAC} from \"../../state/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport const ErrorSnackbar = React.memo(() => {\n    const error = useSelector<appRootStateType, null | string>(state => state.app.error)\n    const dispatch = useDispatch()\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC(null))\n    }\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={3000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n})\n\n","import {responseType, instance} from \"./todolist-api\";\n\nexport type taskType = {\n    id: string,\n    title: string,\n    description: string,\n    todoListId: string,\n    order: number,\n    status: taskStatuses,\n    priority: taskPriorities,\n    startDate: string,\n    deadline: string,\n    addedDate: string\n}\nexport type updateTaskModelType = {\n    title: string,\n    description: string,\n    status: number,\n    priority: number,\n    deadline: string,\n}\n\nexport enum taskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum taskPriorities {\n    Low = 0,\n    Middle = 1,\n    High = 2,\n    Urgently = 3,\n    Later = 4\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: taskType[]\n}\n\n\nexport const tasksAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<responseType<{ item: taskType }>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<responseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask(todolistId: string, taskId: string, model: updateTaskModelType) {\n        return instance.put<responseType<taskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n    }\n}\n","import { makeStyles} from \"@material-ui/styles\";\n\nexport const useStyles = makeStyles({\n    red: {\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n        border: 0,\n        borderRadius: 3,\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        color: 'white',\n        height: 31,\n        padding: '0 10px',\n        margin: 8,\n    },\n    blue: {\n        background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n        border: 0,\n        borderRadius: 3,\n        boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n        color: 'white',\n        height: 31,\n        padding: '0 10px',\n        margin: 3,\n    },\n    smallBtn: {\n        background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n        border: 0,\n        borderRadius: 3,\n        boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n        color: 'white',\n        height:  34,\n        minWidth: 11,\n        padding: '0 10px',\n        margin: '1px 15px',\n    },\n    removeTask: {\n        padding: 6,\n        borderRadius: '50%',\n        minWidth: 40,\n    }\n\n});\n\n\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {useStyles} from \"../../styles\";\nimport {RequestStatusType} from \"../../state/app-reducer\";\n\n\nexport type addItemFormType = {\n    addItem: (title: string) => void\n    entityStatus?: RequestStatusType\n}\n\nconst AddItemForm = React.memo((props: addItemFormType) => {\n    console.log('AddItemForm called')\n    const [title, setTitle] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const addTaskTitle = () => {\n        if (title.trim() !== '') {\n            props.addItem(title)\n            setTitle('')\n        } else {\n            setError('Title required')\n        }\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) setError(null)\n        if (e.key === 'Enter') {\n            addTaskTitle()\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const classes = useStyles()\n    return (\n        <div>\n            <TextField error={!!error}\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       variant=\"outlined\"\n                       label={'Type value...'}\n                       helperText={error}\n                       disabled={props.entityStatus === 'loading'}\n            />\n            <Button className={classes.smallBtn} onClick={addTaskTitle} disabled={props.entityStatus === 'loading'}>Add</Button>\n        </div>\n    )\n})\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\nimport '../../App.css'\n\nexport type editableSpanType = {\n    title: string\n    onChange: (newTitle: string) => void\n}\n\nconst EditableSpan = React.memo((props: editableSpanType) => {\n    console.log('EditableSpan called')\n    const [editMode, setEditMode] = useState(false)\n    const [title, setTitle] = useState('')\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        props.onChange(title)\n    }\n    const onChangeTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode ?\n        <TextField type=\"text\" value={title} onBlur={activateViewMode} autoFocus onChange={onChangeTaskTitle}/> :\n        <span className={'title-task'} onDoubleClick={activateEditMode}>{props.title}</span>\n})\nexport default EditableSpan","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EditableSpan from \"../../components/EditableSpan/EditableSpan\";\nimport {useStyles} from \"../../styles\";\nimport {taskStatuses, taskType} from \"../../api/task-api\";\nimport {RequestStatusType} from \"../../state/app-reducer\";\n\nexport type taskPropsType = {\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTaskStatus: (taskId: string, status: taskStatuses, todolistId: string) => void\n    changeTasksTitle: (taskId: string, todolistId: string, newTitle: string) => void\n    task: taskType\n    todolistId: string\n    entityStatus?: RequestStatusType\n}\nconst Task: React.FC<taskPropsType> = React.memo(({\n                                                      removeTask,\n                                                      changeTaskStatus,\n                                                      changeTasksTitle,\n                                                      task,\n                                                      todolistId,\n                                                      entityStatus\n                                                  }) => {\n    const classes = useStyles()\n\n    const onClickHandler = () => removeTask(task.id, todolistId)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        const newIsDoneChecked = e.currentTarget.checked\n        changeTaskStatus(task.id, newIsDoneChecked ? taskStatuses.Completed: taskStatuses.New, todolistId)\n    }\n    const onChangeTitleTask = useCallback((newTitle: string) => {\n        changeTasksTitle(task.id, todolistId, newTitle)\n    }, [changeTasksTitle, task.id, todolistId])\n\n    return (\n        <li key={task.id} className={task.status === taskStatuses.Completed ? 'completed-task' : ''}>\n            <Checkbox\n                checked={task.status === taskStatuses.Completed}\n                onChange={onChangeHandler}\n            />\n            <EditableSpan title={task.title} onChange={onChangeTitleTask}/>\n            <IconButton className={classes.removeTask} onClick={onClickHandler} disabled={entityStatus === 'loading'}>&times;</IconButton>\n        </li>\n    )\n})\nexport default Task","import {filterValuesType} from \"../features/todolistList/Todolist\";\nimport {todolistAPI, todolistType} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\n\ntype ActionType =\n    removeTodolistActionType\n    | addTodolistActionType\n    | changeTodolistTitleActionType\n    | changeTodolistFilterActionType\n    | setTodolistsActionType\n    | ReturnType<typeof changeTodolistEntityStatusAC>\n\nexport type setTodolistsActionType = {\n    type: 'SET-TODOLISTS'\n    todolists: todolistType[]\n}\ntype removeTodolistActionType = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\nexport type addTodolistActionType = {\n    type: 'ADD-TODOLIST'\n    todolist: todolistType\n}\ntype changeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    todolistId: string\n    title: string\n}\ntype changeTodolistFilterActionType = {\n    type: 'CHANGE-TODOLIST-FILTER'\n    todolistId: string\n    filter: filterValuesType\n}\nexport type TodolistDomainType = todolistType & {\n    filter: filterValuesType\n    entityStatus: RequestStatusType\n}\nconst initialState: TodolistDomainType[] = []\nexport const todolistReducer = (state = initialState, action: ActionType): TodolistDomainType[] => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST': {\n            let filteredTodolist = state.filter(tl => tl.id !== action.id)\n            return filteredTodolist;\n        }\n        case 'ADD-TODOLIST': {\n            const newTodolist: TodolistDomainType = {...action.todolist, filter: \"all\", entityStatus: 'idle'}\n            return [newTodolist, ...state]\n        }\n        case 'CHANGE-TODOLIST-TITLE': {\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\n        }\n        case 'CHANGE-TODOLIST-FILTER': {\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\n        }\n        case \"SET-TODOLISTS\": {\n            return action.todolists.map(tl => {\n                return {\n                    ...tl,\n                    filter: 'all', entityStatus: 'idle'\n                }\n            })\n        }\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\": {\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.entityStatus} : tl)\n        }\n        default:\n            return state\n    }\n}\nexport const removeTodolistAC = (todolistId: string): removeTodolistActionType => {\n    return {type: \"REMOVE-TODOLIST\", id: todolistId}\n}\nexport const addTodolistAC = (todolist: todolistType): addTodolistActionType => {\n    return {type: \"ADD-TODOLIST\", todolist}\n}\nexport const changeTodolistTitleAC = (todolistId: string, title: string): changeTodolistTitleActionType => {\n    return {type: \"CHANGE-TODOLIST-TITLE\", todolistId, title}\n}\nexport const changeTodolistFilterAC = (todolistId: string, filter: filterValuesType): changeTodolistFilterActionType => {\n    return {type: \"CHANGE-TODOLIST-FILTER\", todolistId, filter}\n}\nexport const setTodolistsAC = (todolists: todolistType[]): setTodolistsActionType => {\n    return {type: \"SET-TODOLISTS\", todolists}\n}\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) => {\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', todolistId, entityStatus} as const\n}\nexport const fetchTodolistsTC = () => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        todolistAPI.getTodolist()\n            .then(res => {\n                dispatch(setTodolistsAC(res.data))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            })\n            .catch(error => {\n                handleServerNetworkError(error, dispatch)\n            })\n    }\n}\nexport const removeTodolistsTC = (todolistId: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n        todolistAPI.deleteTodolist(todolistId)\n            .then(() => {\n                dispatch(removeTodolistAC(todolistId))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            })\n    }\n}\nexport const addTodolistsTC = (title: string) => {\n\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        todolistAPI.addTodolist(title)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(addTodolistAC(res.data.data.item))\n                    dispatch(setAppStatusAC(\"succeeded\"))\n                } else {\n                    dispatch(setAppErrorAC(res.data.messages[0]))\n                    dispatch(setAppStatusAC(\"succeeded\"))\n                }\n            })\n    }\n}\nexport const changeTodolistsTC = (todolistId: string, title: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n        todolistAPI.updateTodolist(todolistId, title)\n            .then((res) => {\n                if (res.data.resultCode === 0) {\n                    dispatch(changeTodolistTitleAC(todolistId, title))\n                    dispatch(setAppStatusAC(\"succeeded\"))\n                    dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\n                } else {\n                    handleServerAppError(res.data, dispatch)\n                }\n            })\n    }\n}","import {addTodolistActionType, changeTodolistEntityStatusAC, setTodolistsActionType} from \"./todolists-reducer\";\nimport {tasksAPI, taskStatuses, taskType, updateTaskModelType} from \"../api/task-api\";\nimport {Dispatch} from \"redux\";\nimport {appRootStateType} from \"./store\";\nimport {setAppStatusAC} from \"./app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\n\nexport type TasksStateType = {\n    [key: string]: taskType[]\n}\ntype actionsType = removeTaskACType |\n    addTaskACType |\n    updateTaskACType |\n    changeTaskTitleACType |\n    addTodolistActionType |\n    removeTodolistType |\n    setTodolistsActionType |\n    setTasksActionType\n\ntype removeTaskACType = {\n    type: 'REMOVE-TASK'\n    todolistId: string\n    taskId: string\n}\ntype addTaskACType = {\n    type: 'ADD-TASK'\n    task: taskType\n}\ntype updateTaskACType = {\n    type: 'UPDATE-TASK'\n    taskId: string\n    todolistId: string\n    model: updateDomainTaskModelType\n}\ntype changeTaskTitleACType = {\n    type: 'CHANGE-TASK-TITLE'\n    taskId: string\n    todolistId: string\n    title: string\n}\ntype removeTodolistType = {\n    type: 'REMOVE-TODOLIST'\n    todolistId: string\n}\nexport type setTasksActionType = {\n    type: 'SET-TASKS'\n    tasks: taskType[]\n    todolistId: string\n}\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state = initialState, action: actionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            const stateCopy = {...state}\n            const todolist = state[action.todolistId]\n            const removeTask = todolist.filter(t => t.id !== action.taskId)\n            stateCopy[action.todolistId] = removeTask\n            return stateCopy\n        }\n        case 'ADD-TASK': {\n            const stateCopy = {...state}//делаем копию\n            const newTask = action.task//создаем таску\n            const tasks = stateCopy[newTask.todoListId]//находим тудулист\n            const newTasks = [newTask, ...tasks]//закидываем новую такску ко всем таскам\n            stateCopy[newTask.todoListId] = newTasks//переприсваиваем таски этому тудулисту\n            return stateCopy\n        }\n        case \"UPDATE-TASK\": {\n            // const stateCopy = {...state}\n            // const task = stateCopy[action.todolistId]\n            // stateCopy[action.todolistId] = task.map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\n            // return {...stateCopy}\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\n                    ...t,\n                    ...action.model\n                } : t)\n            }\n        }\n        case \"CHANGE-TASK-TITLE\": {\n            // const stateCopy = {...state}\n            // const changeTaskTitle = stateCopy[action.todolistId].find(t => t.id === action.taskId)\n            // if (changeTaskTitle) {\n            //     changeTaskTitle.title = action.title\n            // }\n            // return {...stateCopy}\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\n                    ...t,\n                    title: action.title\n                } : t)\n            }\n        }\n        case \"ADD-TODOLIST\": {\n            // const stateCopy = {...state}\n            // stateCopy[action.todolist] = []\n            // return stateCopy\n            return {\n                [action.todolist.id]: [],\n                ...state\n            }\n        }\n        case \"REMOVE-TODOLIST\": {\n            const stateCopy = {...state}\n            delete stateCopy[action.todolistId]\n            return stateCopy\n        }\n        case \"SET-TODOLISTS\": {\n            const stateCopy = {...state}\n            action.todolists.forEach(tl => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy\n        }\n        case \"SET-TASKS\": {\n            const stateCopy = {...state}\n            stateCopy[action.todolistId] = action.tasks\n            return stateCopy\n        }\n        default:\n            return state\n    }\n}\nexport const removeTaskAC = (taskId: string, todolistId: string): removeTaskACType => {\n    return {type: 'REMOVE-TASK', todolistId, taskId}\n}\nexport const addTaskAC = (task: taskType): addTaskACType => {\n    return {type: \"ADD-TASK\", task}\n}\nexport const updateTaskAC = (taskId: string, model: updateDomainTaskModelType, todolistId: string): updateTaskACType => {\n    return {type: \"UPDATE-TASK\", model, taskId, todolistId}\n}\n// export const changeTaskTitleAC = (taskId: string, todolistId: string, title: string): changeTaskTitleACType => {\n//     return {type: \"CHANGE-TASK-TITLE\", taskId, todolistId, title}\n// }\nexport const RemoveTodolistAC = (todolistId: string): removeTodolistType => {\n    return {type: \"REMOVE-TODOLIST\", todolistId}\n}\n\nexport const setTasksAC = (tasks: taskType[], todolistId: string): setTasksActionType => {\n    return {type: \"SET-TASKS\", tasks, todolistId}\n}\nexport const fetchTasksTC = (todolistId: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        tasksAPI.getTasks(todolistId)\n            .then(res => {\n                dispatch(setTasksAC(res.data.items, todolistId))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            })\n    }\n}\nexport const removeTaskTC = (todolistId: string, taskId: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n        tasksAPI.deleteTask(todolistId, taskId)\n            .then(() => {\n                dispatch(removeTaskAC(taskId, todolistId))\n                dispatch(setAppStatusAC(\"succeeded\"))\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\n            })\n    }\n}\nexport const addTaskTC = (newTaskTitle: string, todolistId: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n        tasksAPI.createTask(todolistId, newTaskTitle)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(addTaskAC(res.data.data.item))\n                    dispatch(setAppStatusAC(\"succeeded\"))\n                    dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\n                } else {\n                    handleServerAppError(res.data, dispatch)\n                }\n\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch)\n            })\n    }\n}\nexport const changeTaskStatusTC = (todolistId: string, status: taskStatuses, taskId: string) => {\n    return (dispatch: Dispatch, getState: () => appRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            console.warn('task not found in the state')\n            return\n        }\n        const model: updateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            status: status,\n            title: task.title\n        }\n        tasksAPI.updateTask(todolistId, taskId, model)\n            .then(() => {\n                dispatch(updateTaskAC(taskId, model, todolistId))\n            })\n    }\n}\nexport type updateDomainTaskModelType = {\n    title?: string,\n    description?: string,\n    status?: number,\n    priority?: number,\n    deadline?: string,\n    stateDate?: string\n}\nexport const updateTaskTC = (todolistId: string, domainModel: updateDomainTaskModelType, taskId: string) => {\n    return (dispatch: Dispatch, getState: () => appRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            console.warn('task not found in the state')\n            return\n        }\n        const apiModel: updateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            status: task.status,\n            title: task.title,\n            ...domainModel\n        }\n        tasksAPI.updateTask(todolistId, taskId, apiModel)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\n                } else {\n                    handleServerAppError(res.data, dispatch)\n\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch)\n            })\n    }\n}","import React, {useCallback, useEffect} from \"react\";\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\nimport EditableSpan from \"../../components/EditableSpan/EditableSpan\";\nimport {Button} from \"@material-ui/core\";\nimport {useStyles} from \"../../styles\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Task from \"../task/Task\";\nimport {taskStatuses, taskType} from \"../../api/task-api\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchTasksTC} from \"../../state/tasks-reducer\";\nimport {TodolistDomainType} from \"../../state/todolists-reducer\";\n\nexport type filterValuesType = 'all' | 'active' | 'completed'\n\ntype todolistPropsType = {\n    todolist: TodolistDomainType\n    tasks: taskType[]\n    removeTask: (taskId: string, todolistId: string) => void\n    changeFilter: (values: filterValuesType, todolistId: string) => void\n    addTask: (newTaskTitle: string, todolistId: string) => void\n    changeTaskStatus: (taskId: string, status: taskStatuses, todolistId: string) => void\n    removeTodolists: (todolistId: string) => void\n    changeTasksTitle: (taskId: string, todolistId: string, newTitle: string) => void\n    onChangeTitle: (todolistId: string, newTitle: string) => void\n    demo?: boolean\n}\n\n\nconst Todolist: React.FC<todolistPropsType> = React.memo(({\n                                                              tasks,\n                                                              removeTask,\n                                                              changeFilter,\n                                                              addTask,\n                                                              changeTaskStatus,\n                                                              todolist,\n                                                              removeTodolists,\n                                                              changeTasksTitle,\n                                                              onChangeTitle,\n                                                              demo\n                                                          }) => {\n    console.log(\"Todolist called\")\n    if (typeof demo === 'undefined') demo = false\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (!demo) {\n            dispatch(fetchTasksTC(todolist.id))\n        }\n    }, [dispatch, todolist.id, demo])\n\n    const onAllClickHandler = useCallback(() => {\n        changeFilter('all', todolist.id)\n    }, [changeFilter, todolist.id])\n    const onActiveClickHandler = useCallback(() => {\n        changeFilter('active', todolist.id)\n    }, [changeFilter, todolist.id])\n    const onCompletedClickHandler = useCallback(() => {\n        changeFilter('completed', todolist.id)\n    }, [changeFilter, todolist.id])\n    const removeTodolist = () => {\n        removeTodolists(todolist.id)\n    }\n    const addTaskTitle = useCallback((title: string) => {\n        addTask(title, todolist.id)\n    }, [addTask, todolist.id])\n    const onChangeTodolistTitle = useCallback((newTitle: string) => {\n        onChangeTitle(todolist.id, newTitle)\n    }, [onChangeTitle, todolist.id])\n\n    const classes = useStyles()\n\n    let tasksForTodolist = tasks\n    if (todolist.filter === 'active') {\n        tasksForTodolist = tasks.filter(t => t.status === taskStatuses.New)\n    }\n    if (todolist.filter === 'completed') {\n        tasksForTodolist = tasks.filter(t => t.status === taskStatuses.Completed)\n    }\n\n    return (\n        <div>\n            <div>\n                <h3>\n                    <EditableSpan title={todolist.title} onChange={onChangeTodolistTitle}/>\n                    <Button className={classes.smallBtn} onClick={removeTodolist}\n                            disabled={todolist.entityStatus === 'loading'}><DeleteIcon/></Button>\n                </h3>\n                <AddItemForm addItem={addTaskTitle} entityStatus={todolist.entityStatus}/>\n\n            </div>\n            <ul>\n                {tasksForTodolist.map(t => (\n                    <Task\n                        key={t.id}\n                        todolistId={todolist.id}\n                        removeTask={removeTask}\n                        changeTasksTitle={changeTasksTitle}\n                        changeTaskStatus={changeTaskStatus}\n                        task={t}\n                        entityStatus={todolist.entityStatus}\n                    />\n                ))}\n            </ul>\n            <div>\n                <Button className={todolist.filter === 'all' ? classes.red : classes.blue}\n                        onClick={onAllClickHandler}>All\n                </Button>\n                <Button className={todolist.filter === 'active' ? classes.red : classes.blue}\n                        onClick={onActiveClickHandler}>Active\n                </Button>\n                <Button className={todolist.filter === 'completed' ? classes.red : classes.blue}\n                        onClick={onCompletedClickHandler}>Completed\n                </Button>\n            </div>\n        </div>\n    )\n})\nexport default Todolist\n","import {Grid, Paper} from \"@material-ui/core\";\nimport AddItemForm from \"../components/AddItemForm/AddItemForm\";\nimport Todolist, {filterValuesType} from \"./todolistList/Todolist\";\nimport React, {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {appRootStateType} from \"../state/store\";\nimport {\n    addTodolistsTC, changeTodolistFilterAC,\n    changeTodolistsTC,\n    fetchTodolistsTC,\n    removeTodolistsTC,\n    TodolistDomainType\n} from \"../state/todolists-reducer\";\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"../state/tasks-reducer\";\nimport {taskStatuses} from \"../api/task-api\";\nimport {Redirect} from \"react-router-dom\";\n\nexport type propsType = {\n    demo?: boolean\n}\n\nexport const TodolistList: React.FC<propsType> = ({demo}) => {\n    const todolists = useSelector<appRootStateType, TodolistDomainType[]>(state => state.todolists)\n    const tasks = useSelector<appRootStateType, TasksStateType>(state => state.tasks)\n     const isLoggedIn = useSelector<appRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (demo || !isLoggedIn) {\n            return\n        } else {\n            dispatch(fetchTodolistsTC())\n        }\n    }, [dispatch, demo, isLoggedIn])\n\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\n        dispatch(removeTaskTC(todolistId, taskId))\n    }, [dispatch])\n    const addTask = useCallback((newTaskTitle: string, todolistId: string) => {\n        dispatch(addTaskTC(newTaskTitle, todolistId))\n    }, [dispatch])\n    const changeStatus = useCallback((taskId: string, status: taskStatuses, todolistId: string) => {\n        dispatch(updateTaskTC(todolistId, {status}, taskId))\n    }, [dispatch])\n    const changeTasksTitle = useCallback((taskId: string, todolistId: string, newTitle: string) => {\n        dispatch(updateTaskTC(todolistId, {title: newTitle}, taskId))\n    }, [dispatch])\n    const removeTodolists = useCallback((todolistId: string) => {\n        dispatch(removeTodolistsTC(todolistId))\n    }, [dispatch])\n    const addTodolist = useCallback((title: string) => {\n        dispatch(addTodolistsTC(title))\n    }, [dispatch])\n    const onChangeTitle = useCallback((todolistId: string, newTitle: string) => {   /*изменение названия тудулиста*/\n        dispatch(changeTodolistsTC(todolistId, newTitle))\n    }, [dispatch])\n    const changeFilter = useCallback((filter: filterValuesType, todolistId: string) => {\n        const action = changeTodolistFilterAC(todolistId, filter)\n        dispatch(action)\n    }, [dispatch])\n    if (!isLoggedIn) {\n        debugger\n        return <Redirect to='/login'/>\n    }\n    return (\n        <>\n            <Grid container style={{padding: 20}}>\n                <AddItemForm addItem={addTodolist}/>\n            </Grid>\n            <Grid container spacing={6}>\n                {todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id]\n\n                    return (\n                        <Grid item key={tl.id}>\n                            <Paper elevation={3} style={{padding: 10}}>\n                                <Todolist\n                                    demo={demo}\n                                    todolist={tl}\n                                    key={tl.id}\n                                    tasks={allTodolistTasks}\n                                    removeTask={removeTask}\n                                    changeFilter={changeFilter}\n                                    addTask={addTask}\n                                    changeTaskStatus={changeStatus}\n                                    removeTodolists={removeTodolists}\n                                    changeTasksTitle={changeTasksTitle}\n                                    onChangeTitle={onChangeTitle}\n                                />\n                            </Paper>\n                        </Grid>\n                    )\n                })}\n            </Grid>\n        </>\n    )\n}\n\n\n\n","import React from 'react';\nimport {useFormik} from 'formik';\nimport {Button, Checkbox, FormControl, FormControlLabel, FormLabel, Grid, TextField} from \"@material-ui/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"../../state/authReducer\";\nimport {appRootStateType} from \"../../state/store\";\nimport {Redirect} from 'react-router-dom';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<appRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: values => {\n            const errors: FormikErrorType = {}\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 4) {\n                errors.password = 'Must be more than 4 characters';\n            }\n\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm()\n        },\n    });\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n    return (\n        <Grid container justify=\"center\">\n            <Grid item xs={4}>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormControl>\n                        <FormLabel>\n                            <p>To log in get registered\n                                <a href={'https://social-network.samuraijs.com/'}\n                                   rel=\"noopener\"> here\n                                </a>\n                            </p>\n                            <p>or use common test account credentials:</p>\n                            <p>Email: free@samuraijs.com</p>\n                            <p>Password: free</p>\n                        </FormLabel>\n                        <TextField\n                            type=\"text\"\n                            label='email'\n                            margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email ?\n                            <div style={{color: '#990000', fontSize: '14px'}}>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label='password'\n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password ?\n                            <div style={{color: '#990000', fontSize: '14px'}}>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox/>}\n                            {...formik.getFieldProps('rememberMe')}\n                            checked={formik.values.rememberMe}\n                        />\n                        <Button type=\"submit\" variant={'contained'} color={'primary'}>Login</Button>\n                    </FormControl>\n                </form>\n            </Grid>\n        </Grid>\n    );\n};","import React, {useCallback, useEffect} from 'react';\nimport '../App.css';\nimport {\n    AppBar,\n    Button, CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {appRootStateType} from \"../state/store\";\nimport {initializeAppTC, RequestStatusType} from \"../state/app-reducer\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\nimport {propsType, TodolistList} from \"./TodolistList\";\nimport {Login} from \"./login/Login\";\nimport {Route} from 'react-router-dom';\nimport {logoutTC} from \"../state/authReducer\";\n\n\nconst AppWithRedux: React.FC<propsType> = ({demo = false}) => {\n\n    const status = useSelector<appRootStateType, RequestStatusType>(state => state.app.status)\n    const isInitialized = useSelector<appRootStateType, boolean>(state => state.app.isInitialized)\n    const isLoggedIn = useSelector<appRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [dispatch])\n\n    const logOutHandler = useCallback(() => {\n        dispatch(logoutTC())\n    }, [dispatch])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\n                </Toolbar>\n            </AppBar>\n            {status === 'loading' && <LinearProgress color={'secondary'}/>}\n            <Container fixed>\n                <Route exact path={'/'} render={() => <TodolistList demo={demo}/>}/>\n                <Route path={'/login'} render={() => <Login/>}/>\n            </Container>\n            <ErrorSnackbar/>\n        </div>\n    )\n}\n\nexport default AppWithRedux\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {todolistReducer} from \"./todolists-reducer\";\nimport {tasksReducer} from \"./tasks-reducer\";\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"./authReducer\";\n\nconst rootReducer = combineReducers({\n    todolists: todolistReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer\n})\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\nexport type appRootStateType = ReturnType<typeof rootReducer>\n\n//@ts-ignore\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithRedux from \"./features/AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <AppWithRedux/>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}